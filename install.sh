#!/bin/bash
# Based Node Installer - Version pour BF1337/basednode
# Ce script installe et configure un n≈ìud validateur BasedAI en utilisant le fork BF1337
# Compatible avec Linux, WSL, et diff√©rents syst√®mes d'exploitation

# Correction du probl√®me de fin de ligne
sed -i 's/\r$//' "$0"

# V√©rification des arguments
if [ "$#" -ne 5 ]; then
    echo "Usage: $0 <WALLET_ADDRESS> <NODE_NAME> <STAKE_AMOUNT> <SERVER_TYPE> <OS>"
    exit 1
fi

WALLET_ADDRESS=$1
NODE_NAME=$2
STAKE_AMOUNT=$3
SERVER_TYPE=$4
OS=$5

# Affichage du logo Based Node
echo -e "\e[36m"
echo "‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë       ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë"
echo "‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë        "
echo "‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë        "
echo "‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë   "
echo "‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë        "
echo "‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë        "
echo "‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë       ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë"
echo -e "\e[0m"
echo "                                                                      \e[36mNODE PROFESSIONAL INSTALLER\e[0m"
echo ""

# D√©tection du syst√®me d'exploitation
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if grep -q Microsoft /proc/version; then
            echo "wsl"
        elif grep -q Ubuntu /etc/os-release; then
            echo "ubuntu"
        elif grep -q Debian /etc/os-release; then
            echo "debian"
        else
            echo "linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

OS_TYPE=$(detect_os)
echo "üñ•Ô∏è  Syst√®me d'exploitation d√©tect√©: $OS_TYPE"

# Obtention d'informations d√©taill√©es sur le syst√®me d'exploitation
get_detailed_os() {
    case "$OS_TYPE" in
        "ubuntu")
            if command -v lsb_release &> /dev/null; then
                lsb_release -rs
            else
                grep -oP 'VERSION_ID="\K[^"]+' /etc/os-release
            fi
            ;;
        "debian")
            if command -v lsb_release &> /dev/null; then
                lsb_release -rs
            else
                grep -oP 'VERSION_ID="\K[^"]+' /etc/os-release
            fi
            ;;
        "wsl")
            echo "Environnement WSL"
            ;;
        "macos")
            sw_vers -productVersion
            ;;
        *)
            echo "Inconnu"
            ;;
    esac
}

OS_VERSION=$(get_detailed_os)
echo "üìã Version du syst√®me d'exploitation: $OS_VERSION"

# V√©rification des privil√®ges root ou sudo
check_privileges() {
    if [[ $EUID -eq 0 ]]; then
        return 0  # L'utilisateur est root
    elif [[ "$OS_TYPE" == "wsl" ]] || [[ "$OS_TYPE" == "linux" ]]; then
        # V√©rification si l'utilisateur a des privil√®ges sudo
        if sudo -n true 2>/dev/null; then
            return 0  # L'utilisateur a des privil√®ges sudo
        else
            echo "‚ùå Ce script n√©cessite des privil√®ges root. Veuillez l'ex√©cuter avec sudo."
            echo "üí° Essayez: sudo $0 $@"
            exit 1
        fi
    else
        echo "‚ùå Ce script n√©cessite des privil√®ges root. Veuillez l'ex√©cuter en tant qu'administrateur."
        exit 1
    fi
}

check_privileges

# Mise √† jour du syst√®me
update_system() {
    echo "üîÑ Mise √† jour du syst√®me..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl")
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 wget jq
            ;;
        "macos")
            # V√©rification si Homebrew est install√©
            if ! command -v brew &> /dev/null; then
                echo "Installation de Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            brew update
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez vous assurer que WSL est install√© avec Ubuntu."
            echo "Ce script est con√ßu pour l'environnement Linux/WSL."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            exit 1
            ;;
    esac
}

update_system

# Installation des d√©pendances pour BF1337/basednode
install_dependencies() {
    echo "üì¶ Installation des d√©pendances pour BF1337/basednode..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl")
            sudo apt-get install -y git curl wget jq software-properties-common apt-transport-https ca-certificates gnupg2 \
            build-essential clang libclang-dev llvm libudev-dev protobuf-compiler pkg-config libssl-dev \
            python3 python3-pip npm nodejs
            ;;
        "macos")
            brew install curl wget jq git clang llvm protobuf python3 npm nodejs
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez installer les d√©pendances manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            exit 1
            ;;
    esac
}

install_dependencies

# Cr√©ation de l'utilisateur d√©di√© (d√©plac√© avant l'installation de Rust)
create_user() {
    echo "üë§ Cr√©ation de l'utilisateur 'basedai'..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl")
            if ! id "basedai" &>/dev/null; then
                sudo useradd -m -s /bin/bash basedai
                sudo usermod -aG docker basedai 2>/dev/null || echo "Groupe docker non trouv√©, ignor√©"
            else
                echo "L'utilisateur 'basedai' existe d√©j√†."
            fi
            ;;
        "macos")
            if ! id "basedai" &>/dev/null; then
                sudo sysadminctl -addUser basedai
                echo "Veuillez ajouter manuellement l'utilisateur 'basedai' au groupe docker:"
                echo "sudo dscl . append /Groups/docker GroupMembership basedai"
            else
                echo "L'utilisateur 'basedai' existe d√©j√†."
            fi
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, la cr√©ation d'utilisateur est diff√©rente. Veuillez cr√©er l'utilisateur manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            ;;
    esac
}

create_user

# Installation de Rust et Cargo pour la compilation
install_rust() {
    echo "üîß Installation de Rust et Cargo..."
    
    # V√©rifier si Rust est d√©j√† install√© pour l'utilisateur basedai
    if sudo -u basedai bash -c "source ~/.cargo/env && cargo --version" > /dev/null 2>&1; then
        echo "‚úÖ Rust/Cargo est d√©j√† install√© pour l'utilisateur basedai"
        return 0
    fi
    
    # Installation de Rust via rustup pour l'utilisateur basedai
    sudo -u basedai bash -c "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
    
    # Configuration de Rust pour BF1337/basednode
    sudo -u basedai bash -c "source ~/.cargo/env && rustup default stable"
    sudo -u basedai bash -c "source ~/.cargo/env && rustup update"
    sudo -u basedai bash -c "source ~/.cargo/env && rustup toolchain install nightly-2025-01-07"
    sudo -u basedai bash -c "source ~/.cargo/env && rustup target add wasm32-unknown-unknown --toolchain nightly-2025-01-07"
    
    # Ajouter le PATH au .bashrc de l'utilisateur basedai
    echo 'export PATH="$HOME/.cargo/bin:$PATH"' | sudo -u basedai tee -a /home/basedai/.bashrc > /dev/null
    
    # V√©rification de l'installation
    if sudo -u basedai bash -c "source ~/.cargo/env && cargo --version" > /dev/null 2>&1; then
        echo "‚úÖ Rust/Cargo a √©t√© install√© avec succ√®s pour l'utilisateur basedai"
    else
        echo "‚ùå L'installation de Rust/Cargo a √©chou√©"
        return 1
    fi
}

install_rust

# Configuration du PATH pour Cargo
configure_cargo_path() {
    echo "üõ†Ô∏è  Configuration du PATH pour Cargo..."
    
    # Cr√©er un lien symbolique dans /usr/local/bin pour que sudo puisse trouver cargo
    if [ ! -f "/usr/local/bin/cargo" ]; then
        sudo ln -sf /home/basedai/.cargo/bin/cargo /usr/local/bin/cargo
        echo "‚úÖ Lien symbolique pour cargo cr√©√© dans /usr/local/bin"
    fi
    
    if [ ! -f "/usr/local/bin/rustc" ]; then
        sudo ln -sf /home/basedai/.cargo/bin/rustc /usr/local/bin/rustc
        echo "‚úÖ Lien symbolique pour rustc cr√©√© dans /usr/local/bin"
    fi
    
    # Ajouter le PATH au profil syst√®me pour les sessions futures
    echo 'export PATH="/home/basedai/.cargo/bin:$PATH"' | sudo tee /etc/profile.d/cargo.sh > /dev/null
    sudo chmod +x /etc/profile.d/cargo.sh
    
    echo "‚úÖ PATH configur√© pour Cargo"
}

configure_cargo_path

# Cr√©ation des r√©pertoires
create_directories() {
    echo "üìÅ Cr√©ation des r√©pertoires..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl"|"macos")
            sudo mkdir -p /opt/basedai
            sudo mkdir -p /opt/basedai/data
            sudo mkdir -p /opt/basedai/config
            sudo mkdir -p /opt/basedai/logs
            sudo mkdir -p /opt/basedai/monitoring
            sudo chown -R basedai:basedai /opt/basedai
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez cr√©er les r√©pertoires manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            ;;
    esac
}

create_directories

# Fonction pour appliquer le fix de l'enum Message
apply_substrate_fix() {
    echo "üîß Application du fix pour l'enum Message..."
    
    # Trouver le dossier substrate dans ~/.cargo/git/checkouts/
    CARGO_DIR="/home/basedai/.cargo/git/checkouts"
    if [ ! -d "$CARGO_DIR" ]; then
        echo "‚ö†Ô∏è  Le dossier ~/.cargo/git/checkouts/ n'existe pas encore. Le fix sera appliqu√© plus tard si n√©cessaire."
        return 0
    fi
    
    # Trouver le premier dossier substrate (peut y en avoir plusieurs)
    SUBSTRATE_DIR=$(find "$CARGO_DIR" -type d -name "substrate-*" | head -n 1)
    if [ -z "$SUBSTRATE_DIR" ]; then
        echo "‚ö†Ô∏è  Aucun dossier substrate trouv√©. Le fix sera appliqu√© plus tard si n√©cessaire."
        return 0
    fi
    
    echo "Dossier Substrate trouv√©: $SUBSTRATE_DIR"
    
    # Trouver le fichier message.rs
    MESSAGE_FILE="$SUBSTRATE_DIR"/*/client/network/src/protocol/message.rs
    if [ ! -f "$MESSAGE_FILE" ]; then
        echo "‚ö†Ô∏è  Fichier message.rs non trouv√©. Le fix sera appliqu√© plus tard si n√©cessaire."
        return 0
    fi
    
    echo "Fichier √† modifier: $MESSAGE_FILE"
    
    # Faire une sauvegarde
    BACKUP_FILE="$MESSAGE_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$MESSAGE_FILE" "$BACKUP_FILE"
    echo "Sauvegarde cr√©√©e: $BACKUP_FILE"
    
    # Appliquer le patch en utilisant Python pour plus de fiabilit√©
    python3 << EOF
import re
import sys

with open('$MESSAGE_FILE', 'r') as f:
    content = f.read()

# Pattern pour trouver et remplacer l'enum Message
pattern = r'pub enum Message<Header, Hash, Number, Extrinsic> \{.*?\}'
replacement = '''pub enum Message<Header, Hash, Number, Extrinsic> {
    /// Status packet.
    Status(Status<Hash, Number>),
    /// Block request.
    BlockRequest(BlockRequest<Hash, Number>),
    /// Block response.
    BlockResponse(BlockResponse<Header, Hash, Extrinsic>),
    /// Block announce.
    BlockAnnounce(BlockAnnounce<Header>),
    /// Consensus protocol message.
    #[codec(index = 6)]
    Consensus(ConsensusMessage),
    /// Remote method call request.
    #[codec(index = 7)]
    RemoteCallRequest(RemoteCallRequest<Hash>),
    /// Remote method call response.
    #[codec(index = 8)]
    RemoteCallResponse(RemoteCallResponse),
    /// Remote storage read request.
    #[codec(index = 9)]
    RemoteReadRequest(RemoteReadRequest<Hash>),
    /// Remote storage read response.
    #[codec(index = 10)]
    RemoteReadResponse(RemoteReadResponse),
    /// Remote header request.
    #[codec(index = 11)]
    RemoteHeaderRequest(RemoteHeaderRequest<Number>),
    /// Remote header response.
    #[codec(index = 12)]
    RemoteHeaderResponse(RemoteHeaderResponse<Header>),
    /// Remote changes request.
    #[codec(index = 13)]
    RemoteChangesRequest(RemoteChangesRequest<Hash>),
    /// Remote changes response.
    #[codec(index = 14)]
    RemoteChangesResponse(RemoteChangesResponse<Number, Hash>),
    /// Remote child storage read request.
    #[codec(index = 15)]
    RemoteReadChildRequest(RemoteReadChildRequest<Hash>),
    /// Batch of consensus protocol messages.
    #[codec(index = 17)]
    ConsensusBatch(Vec<ConsensusMessage>),
}'''

new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)

with open('$MESSAGE_FILE', 'w') as f:
    f.write(new_content)

print("‚úÖ Enum Message corrig√©e avec succ√®s")
EOF
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Fix pour l'enum Message appliqu√© avec succ√®s"
    else
        echo "‚ùå √âchec de l'application du fix"
    fi
}

# Fonction pour appliquer le fix basednode manuellement
apply_fix_basednode_manuel() {
    echo "üîß Application du fix basednode manuel..."
    
    # Trouver le fichier src/lib.rs dans le r√©pertoire de compilation
    BUILD_DIR="/tmp/basednode-build"
    LIB_RS_FILE="$BUILD_DIR/src/lib.rs"
    
    if [ ! -f "$LIB_RS_FILE" ]; then
        echo "‚ö†Ô∏è  Fichier src/lib.rs non trouv√©. Le fix ne peut pas √™tre appliqu√©."
        return 1
    fi
    
    # Faire une sauvegarde
    BACKUP_FILE="$LIB_RS_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$LIB_RS_FILE" "$BACKUP_FILE"
    echo "Sauvegarde cr√©√©e: $BACKUP_FILE"
    
    # Appliquer le patch
    python3 << EOF
import re
import sys

with open('$LIB_RS_FILE', 'r') as f:
    content = f.read()

# Fix pour le probl√®me de compilation
# Remplacer les imports probl√©matiques
content = re.sub(r'use substrate::.*;', '', content)

# Ajouter les bons imports
if 'use frame_support::' not in content:
    content = 'use frame_support::{dispatch::DispatchResult, pallet_prelude::*};\n' + content

if 'use frame_system::' not in content:
    content = 'use frame_system::{pallet_prelude::*};\n' + content

with open('$LIB_RS_FILE', 'w') as f:
    f.write(content)

print("‚úÖ Fix manuel appliqu√© avec succ√®s")
EOF
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Fix manuel appliqu√© avec succ√®s"
        return 0
    else
        echo "‚ùå √âchec de l'application du fix manuel"
        return 1
    fi
}

# T√©l√©chargement et compilation du binaire BasedAI depuis BF1337/basednode
download_and_compile_binary() {
    echo "‚¨áÔ∏è  T√©l√©chargement et compilation de BF1337/basednode..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl"|"macos")
            cd /opt/basedai
            
            # Cr√©er un r√©pertoire temporaire pour la compilation
            BUILD_DIR="/tmp/basednode-build"
            # Supprimer le r√©pertoire s'il existe d√©j√†
            sudo rm -rf "$BUILD_DIR"
            sudo -u basedai mkdir -p "$BUILD_DIR"
            cd "$BUILD_DIR"
            
            # Cloner le d√©p√¥t BF1337/basednode
            echo "Clonage du d√©p√¥t BF1337/basednode..."
            if sudo -u basedai git clone https://github.com/BF1337/basednode.git .; then
                echo "‚úÖ D√©p√¥t clon√© avec succ√®s"
                
                # T√©l√©charger le fichier mainnet1_raw.json n√©cessaire
                echo "T√©l√©chargement du fichier mainnet1_raw.json..."
                sudo -u basedai curl -o mainnet1_raw.json https://raw.githubusercontent.com/BF1337/basednode/main/mainnet1_raw.json
                
                # Compiler le binaire avec la toolchain sp√©cifique
                echo "Compilation du binaire (cela peut prendre plusieurs minutes)..."
                
                # Premi√®re tentative de compilation
                if sudo -u basedai bash -c "source ~/.cargo/env && cargo +nightly-2025-01-07 build --release"; then
                    echo "‚úÖ Compilation r√©ussie!"
                    
                    # Copier le binaire compil√©
                    if [ -f "target/release/basednode" ]; then
                        sudo -u basedai cp target/release/basednode /opt/basedai/based
                        echo "‚úÖ Binaire copi√© avec succ√®s"
                    else
                        echo "‚ùå Binaire compil√© non trouv√©"
                        exit 1
                    fi
                else
                    echo "‚ùå √âchec de la compilation, tentative avec solution alternative..."
                    
                    # Solution alternative 1: Nettoyer et recompiler
                    echo "Solution alternative 1: Nettoyage et recompilation..."
                    sudo -u basedai bash -c "source ~/.cargo/env && cargo clean"
                    
                    # Solution alternative 2: Appliquer le fix manuel
                    echo "Solution alternative 2: Application du fix manuel..."
                    apply_fix_basednode_manuel
                    
                    # Solution alternative 3: Compilation avec moins de parall√©lisation
                    echo "Solution alternative 3: Compilation avec moins de parall√©lisation..."
                    if sudo -u basedai bash -c "source ~/.cargo/env && cargo +nightly-2025-01-07 build --release --jobs 1"; then
                        echo "‚úÖ Compilation r√©ussie avec solution alternative!"
                        
                        # Copier le binaire compil√©
                        if [ -f "target/release/basednode" ]; then
                            sudo -u basedai cp target/release/basednode /opt/basedai/based
                            echo "‚úÖ Binaire copi√© avec succ√®s"
                        else
                            echo "‚ùå Binaire compil√© non trouv√©"
                            exit 1
                        fi
                    else
                        echo "‚ùå √âchec de la compilation avec toutes les solutions alternatives"
                        echo "Veuillez v√©rifier les erreurs ci-dessus et consulter la documentation"
                        exit 1
                    fi
                fi
            else
                echo "‚ùå √âchec du clonage du d√©p√¥t"
                exit 1
            fi
            
            # Copier le fichier mainnet1_raw.json dans le r√©pertoire de config
            sudo -u basedai cp mainnet1_raw.json /opt/basedai/config/
            
            # Nettoyer le r√©pertoire temporaire
            cd /opt/basedai
            sudo rm -rf "$BUILD_DIR"
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez compiler manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            exit 1
            ;;
    esac
}

download_and_compile_binary

# Installation de la biblioth√®que de surveillance
install_monitoring_library() {
    echo "üìä Installation de la biblioth√®que de surveillance..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl"|"macos")
            cd /opt/basedai/monitoring
            
            # Cr√©ation d'un r√©pertoire de surveillance
            mkdir -p basedai-monitor
            cd basedai-monitor
            
            # Cr√©ation d'un package.json
            cat > package.json <<'EOF'
{
  "name": "basedai-monitor",
  "version": "1.0.0",
  "description": "BasedAI Node Monitoring",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "chart.js": "^4.4.0"
  }
}
EOF
            
            # Installation des d√©pendances
            sudo -u basedai npm install
            
            # Cr√©ation de la configuration de surveillance
            cat > config.json <<EOF
{
  "node": {
    "name": "$NODE_NAME",
    "wallet": "$WALLET_ADDRESS",
    "stake": $STAKE_AMOUNT,
    "port": 30333,
    "rpcPort": 9933
  },
  "network": {
    "bootnodes": [
      "/ip4/108.181.3.21/tcp/30333/p2p/12D3KooWNi3e5Qs2frbfMxmHPBSHiouZgBjLzKgYejW82SUR8s59",
      "/ip4/145.14.157.152/tcp/30333/p2p/12D3KooWC6F9XVH3YPGWkEbMdJp97bdMS4jT1LCPn24yFd6FWnhE",
      "/ip4/46.202.132.238/tcp/30333/p2p/12D3KooWEdDRbhGxbbfBtcZLg3Nm6aR1o86EBgpHwEvYFh3ndjxb",
      "/ip4/46.202.178.141/tcp/30333/p2p/12D3KooWAvmfEhsNCSgeMZEMAJGF3LPT5B64fpCYpRy2ch243pG2",
      "/ip4/5.78.122.38/tcp/30333/p2p/12D3KooWMraofyeuaTdLNJDCpNHDUyv5f2yDDt2eY3T28PVxnmHC",
      "/ip4/84.32.25.204/tcp/30333/p2p/12D3KooWFebYXE8aV7eqfdo9ttTpkzSocd2za9a9omqw9mgJgznR",
      "/ip4/92.112.181.7/tcp/30333/p2p/12D3KooWC44HXrfrvJTojAS55xEPToyjatLHbhKaj1JLgCdZVEGz"
    ],
    "chain": "basedai",
    "rpcPort": 9933,
    "rpcCors": ["*"],
    "rpcMethods": ["*"],
    "rpcExternal": true
  },
  "server": {
    "type": "$SERVER_TYPE",
    "os": "$OS",
    "detected_os": "$OS_TYPE",
    "os_version": "$OS_VERSION"
  },
  "monitoring": {
    "enabled": true,
    "api_endpoint": "http://localhost:8080/api/metrics",
    "update_interval": 30000
  }
}
EOF
            
            echo "‚úÖ Biblioth√®que de surveillance install√©e avec succ√®s"
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez installer la biblioth√®que de surveillance manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            ;;
    esac
}

install_monitoring_library

# G√©n√©ration du fichier de configuration
generate_config() {
    echo "‚öôÔ∏è  G√©n√©ration de la configuration..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl"|"macos")
            sudo -u basedai mkdir -p /opt/basedai/config
            cat > /opt/basedai/config/config.json <<EOF
{
  "node": {
    "name": "$NODE_NAME",
    "wallet": "$WALLET_ADDRESS",
    "stake": $STAKE_AMOUNT,
    "port": 30333,
    "rpcPort": 9933
  },
  "network": {
    "bootnodes": [
      "/ip4/108.181.3.21/tcp/30333/p2p/12D3KooWNi3e5Qs2frbfMxmHPBSHiouZgBjLzKgYejW82SUR8s59",
      "/ip4/145.14.157.152/tcp/30333/p2p/12D3KooWC6F9XVH3YPGWkEbMdJp97bdMS4jT1LCPn24yFd6FWnhE",
      "/ip4/46.202.132.238/tcp/30333/p2p/12D3KooWEdDRbhGxbbfBtcZLg3Nm6aR1o86EBgpHwEvYFh3ndjxb",
      "/ip4/46.202.178.141/tcp/30333/p2p/12D3KooWAvmfEhsNCSgeMZEMAJGF3LPT5B64fpCYpRy2ch243pG2",
      "/ip4/5.78.122.38/tcp/30333/p2p/12D3KooWMraofyeuaTdLNJDCpNHDUyv5f2yDDt2eY3T28PVxnmHC",
      "/ip4/84.32.25.204/tcp/30333/p2p/12D3KooWFebYXE8aV7eqfdo9ttTpkzSocd2za9a9omqw9mgJgznR",
      "/ip4/92.112.181.7/tcp/30333/p2p/12D3KooWC44HXrfrvJTojAS55xEPToyjatLHbhKaj1JLgCdZVEGz"
    ],
    "chain": "basedai",
    "rpcPort": 9933,
    "rpcCors": ["*"],
    "rpcMethods": ["*"],
    "rpcExternal": true
  },
  "server": {
    "type": "$SERVER_TYPE",
    "os": "$OS",
    "detected_os": "$OS_TYPE",
    "os_version": "$OS_VERSION"
  },
  "monitoring": {
    "enabled": true,
    "api_endpoint": "http://localhost:8080/api/metrics",
    "update_interval": 30000
  }
}
EOF
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez cr√©er la configuration manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            ;;
    esac
}

generate_config

# Configuration du pare-feu
configure_firewall() {
    echo "üî• Configuration du pare-feu..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl")
            if command -v ufw &> /dev/null; then
                sudo ufw allow 22/tcp
                sudo ufw allow 30333/tcp
                sudo ufw allow 30333/udp
                sudo ufw allow 8080/tcp
                sudo ufw allow 9933/tcp
                sudo ufw --force enable
            else
                echo "‚ö†Ô∏è  UFW non trouv√©. Installation d'UFW..."
                sudo apt-get install -y ufw
                sudo ufw allow 22/tcp
                sudo ufw allow 30333/tcp
                sudo ufw allow 30333/udp
                sudo ufw allow 8080/tcp
                sudo ufw allow 9933/tcp
                sudo ufw --force enable
            fi
            ;;
        "macos")
            echo "block return" | sudo tee /etc/pf.anchors/basedai
            echo "pass in proto tcp from any to any port 30333" | sudo tee -a /etc/pf.anchors/basedai
            echo "pass in proto udp from any to any port 30333" | sudo tee -a /etc/pf.anchors/basedai
            echo "pass in proto tcp from any to any port 8080" | sudo tee -a /etc/pf.anchors/basedai
            echo "pass in proto tcp from any to any port 9933" | sudo tee -a /etc/pf.anchors/basedai
            sudo pfctl -f /etc/pf.conf
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez configurer le pare-feu manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            ;;
    esac
}

configure_firewall

# Cr√©ation du service systemd
create_service() {
    echo "üìù Cr√©ation du service systemd..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl")
            cat > /etc/systemd/system/basedai.service <<EOF
[Unit]
Description=BasedAI Validator Node (BF1337/basednode)
After=network.target
[Service]
User=basedai
WorkingDirectory=/opt/basedai
ExecStart=/opt/basedai/based --name "$NODE_NAME" --chain "/opt/basedai/config/mainnet1_raw.json" --rpc-external --unsafe-rpc-external --rpc-methods Unsafe --bootnodes /dns/mainnet.basedaibridge.com/tcp/30333/p2p/12D3KooWCQy4hiiA9tHxvQ2PPaSY3mUM6NkMnbsYf2v4FKbLAtUh
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
[Install]
WantedBy=multi-user.target
EOF
            ;;
        "macos")
            # Cr√©ation du service launchd pour macOS
            cat > /tmp/com.basedai.node.plist <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.basedai.node</string>
    <key>ProgramArguments</key>
    <array>
        <string>/opt/basedai/based</string>
        <string>--name</string>
        <string>$NODE_NAME</string>
        <string>--chain</string>
        <string>/opt/basedai/config/mainnet1_raw.json</string>
        <string>--rpc-external</string>
        <string>--unsafe-rpc-external</string>
        <string>--rpc-methods</string>
        <string>Unsafe</string>
        <string>--bootnodes</string>
        <string>/dns/mainnet.basedaibridge.com/tcp/30333/p2p/12D3KooWCQy4hiiA9tHxvQ2PPaSY3mUM6NkMnbsYf2v4FKbLAtUh</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
    <key>WorkingDirectory</key>
    <string>/opt/basedai</string>
    <key>StandardOutPath</key>
    <string>/opt/basedai/logs/basedai.log</string>
    <key>StandardErrorPath</key>
    <string>/opt/basedai/logs/basedai.log</string>
</dict>
</plist>
EOF
            sudo cp /tmp/com.basedai.node.plist /Library/LaunchDaemons/
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez cr√©er le service manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            ;;
    esac
}

create_service

# D√©marrage des services
start_service() {
    echo "üöÄ D√©marrage des services..."
    
    case "$OS_TYPE" in
        "ubuntu"|"debian"|"wsl")
            sudo systemctl daemon-reload
            sudo systemctl start basedai
            sudo systemctl enable basedai
            ;;
        "macos")
            sudo launchctl load /Library/LaunchDaemons/com.basedai.node.plist
            ;;
        "windows")
            echo "‚ö†Ô∏è  Sur Windows, veuillez d√©marrer le service manuellement."
            ;;
        *)
            echo "‚ùå Syst√®me d'exploitation non pris en charge: $OS_TYPE"
            ;;
    esac
}

start_service

# Cr√©ation d'un script de v√©rification adapt√© pour BF1337/basednode
create_check_script() {
    echo "üîç Cr√©ation du script de v√©rification..."
    
    cat > /opt/basedai/check-node.sh <<'EOF'
#!/bin/bash
echo "=========================================="
echo "V√©rification compl√®te du n≈ìud BasedAI (BF1337/basednode)"
echo "=========================================="
echo ""

# V√©rifier le statut des services
echo "1. Statut des services :"
echo "   Service basedai : $(systemctl is-active basedai)"
echo ""

# V√©rifier les ports en √©coute
echo "2. Ports en √©coute :"
if ss -tlnp | grep -q ":30333 "; then
    echo "   ‚úÖ Port 30333 (P2P) : √âcoute"
else
    echo "   ‚ùå Port 30333 (P2P) : Non √©cout√©"
fi
if ss -tlnp | grep -q ":9933 "; then
    echo "   ‚úÖ Port 9933 (RPC) : √âcoute"
else
    echo "   ‚ùå Port 9933 (RPC) : Non √©cout√©"
fi
echo ""

# V√©rifier que le binaire est bien pr√©sent et ex√©cutable
echo "3. V√©rification du binaire :"
if [ -f "/opt/basedai/based" ]; then
    if [ -x "/opt/basedai/based" ]; then
        echo "   ‚úÖ Binaire BasedAI (BF1337/basednode) pr√©sent et ex√©cutable"
        echo "   Chemin : /opt/basedai/based"
        echo "   Version : $(/opt/basedai/based --version 2>/dev/null || echo 'Version non disponible')"
    else
        echo "   ‚ö†Ô∏è  Binaire BasedAI pr√©sent mais non ex√©cutable"
        echo "   Chemin : /opt/basedai/based"
    fi
else
    echo "   ‚ùå Binaire BasedAI non trouv√©"
    echo "   Veuillez compiler le binaire depuis : https://github.com/BF1337/basednode"
fi
echo ""

# V√©rifier la pr√©sence du fichier mainnet1_raw.json
echo "4. V√©rification du fichier de configuration :"
if [ -f "/opt/basedai/config/mainnet1_raw.json" ]; then
    echo "   ‚úÖ Fichier mainnet1_raw.json pr√©sent"
    echo "   Chemin : /opt/basedai/config/mainnet1_raw.json"
else
    echo "   ‚ùå Fichier mainnet1_raw.json non trouv√©"
fi
echo ""

# V√©rifier l'espace disque
echo "5. Espace disque :"
echo "   Espace disponible : $(df -h / | tail -1 | awk '{print $4}')"
echo "   Espace utilis√© : $(df -h / | tail -1 | awk '{print $5}')"
echo ""

echo "=========================================="
echo "V√©rification termin√©e !"
echo "=========================================="
EOF
    chmod +x /opt/basedai/check-node.sh
    chown basedai:basedai /opt/basedai/check-node.sh
    
    echo "‚úÖ Script de v√©rification cr√©√©"
}

create_check_script

# Cr√©ation d'un script de gestion simple
create_management_script() {
    echo "üõ†Ô∏è  Cr√©ation du script de gestion..."
    
    cat > /opt/basedai/manage.sh <<'EOF'
#!/bin/bash
# BasedAI Node Management Script pour BF1337/basednode

case "$1" in
    start)
        echo "D√©marrage du n≈ìud BasedAI..."
        sudo systemctl start basedai
        echo "Service d√©marr√©"
        ;;
    stop)
        echo "Arr√™t du n≈ìud BasedAI..."
        sudo systemctl stop basedai
        echo "Service arr√™t√©"
        ;;
    restart)
        echo "Red√©marrage du n≈ìud BasedAI..."
        sudo systemctl restart basedai
        echo "Service red√©marr√©"
        ;;
    status)
        echo "=== Statut du n≈ìud BasedAI ==="
        sudo systemctl status basedai --no-pager -l
        ;;
    logs)
        echo "Affichage des logs du n≈ìud BasedAI (Ctrl+C pour quitter)..."
        sudo journalctl -u basedai -f
        ;;
    check)
        echo "=== V√©rification compl√®te du n≈ìud ==="
        /opt/basedai/check-node.sh
        ;;
    update)
        echo "Mise √† jour du n≈ìud BasedAI..."
        echo "Cette fonctionnalit√© sera disponible prochainement"
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|logs|check|update}"
        echo ""
        echo "Commandes disponibles :"
        echo "  start    - D√©marrer le n≈ìud"
        echo "  stop     - Arr√™ter le n≈ìud"
        echo "  restart  - Red√©marrer le n≈ìud"
        echo "  status   - V√©rifier le statut du service"
        echo "  logs     - Voir les logs en temps r√©el"
        echo "  check    - V√©rification compl√®te"
        echo "  update   - Mettre √† jour le n≈ìud"
        exit 1
        ;;
esac
EOF
    
    chmod +x /opt/basedai/manage.sh
    chown basedai:basedai /opt/basedai/manage.sh
    
    # Cr√©er un alias pour l'utilisateur actuel
    echo "alias basedai='/opt/basedai/manage.sh'" >> /home/$SUDO_USER/.bashrc
    
    echo "‚úÖ Script de gestion cr√©√©"
    echo "   Utilisez : /opt/basedai/manage.sh [start|stop|restart|status|logs|check|update]"
    echo "   Ou apr√®s reconnexion : basedai [start|stop|restart|status|logs|check|update]"
}

create_management_script

# Affichage des informations de completion
echo ""
echo -e "\e[36m‚úÖ Installation termin√©e avec succ√®s!\e[0m"
echo ""
echo "üìã Informations de votre n≈ìud:"
echo "   Nom du n≈ìud: $NODE_NAME"
echo "   Adresse du portefeuille: $WALLET_ADDRESS"
echo "   Montant du stake: $STAKE_AMOUNT BASED"
echo "   Type de serveur: $SERVER_TYPE"
echo "   Syst√®me d'exploitation: $OS"
echo "   Syst√®me d'exploitation d√©tect√©: $OS_TYPE"
echo "   Version du syst√®me d'exploitation: $OS_VERSION"
echo ""

# TUTORIEL COMPLET POUR G√âRER LE N≈íUD
echo -e "\e[33m"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë          TUTORIEL COMPLET - GESTION DU N≈íUD (BF1337/basednode)      ‚ïë"
echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  COMMANDES DE BASE                                           ‚ïë"
echo "‚ïë  ----------------                                           ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  1. V√©rifier le statut du n≈ìud:                              ‚ïë"
echo "‚ïë     /opt/basedai/manage.sh status                            ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  2. D√©marrer le n≈ìud:                                         ‚ïë"
echo "‚ïë     /opt/basedai/manage.sh start                             ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  3. Arr√™ter le n≈ìud:                                          ‚ïë"
echo "‚ïë     /opt/basedai/manage.sh stop                              ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  4. Red√©marrer le n≈ìud:                                       ‚ïë"
echo "‚ïë     /opt/basedai/manage.sh restart                           ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  5. Voir les logs du n≈ìud en temps r√©el:                      ‚ïë"
echo "‚ïë     /opt/basedai/manage.sh logs                             ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  6. V√©rification compl√®te:                                    ‚ïë"
echo "‚ïë     /opt/basedai/manage.sh check                             ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  Apr√®s reconnexion au syst√®me, vous pourrez utiliser :          ‚ïë"
echo "‚ïë     basedai status                                            ‚ïë"
echo "‚ïë     basedai start                                             ‚ïë"
echo "‚ïë     basedai stop                                              ‚ïë"
echo "‚ïë     basedai restart                                           ‚ïë"
echo "‚ïë     basedai logs                                              ‚ïë"
echo "‚ïë     basedai check                                             ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  ACC√àS AU N≈íUD                                               ‚ïë"
echo "‚ïë  -----------                                               ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  1. Endpoint RPC pour les portefeuilles:                     ‚ïë"
echo "‚ïë     http://localhost:9933                                    ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  2. Pour un acc√®s distant au RPC (via SSH):                   ‚ïë"
echo "‚ïë     ssh -L 9933:localhost:9933 utilisateur@serveur          ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  D√âPANNAGE                                                    ‚ïë"
echo "‚ïë  ---------                                                    ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  1. Si le n≈ìud ne d√©marre pas:                                ‚ïë"
echo "‚ïë     - V√©rifiez les logs: journalctl -u basedai               ‚ïë"
echo "‚ïë     - V√©rifiez le binaire: ls -la /opt/basedai/based        ‚ïë"
echo "‚ïë     - V√©rifiez le config: ls -la /opt/basedai/config/      ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  2. Si vous avez des erreurs de compilation:                  ‚ïë"
echo "‚ïë     - Assurez-vous d'avoir Rust install√© correctement        ‚ïë"
echo "‚ïë     - V√©rifiez que la toolchain nightly-2025-01-07 est install√©e ‚ïë"
echo "‚ïë     - Consultez le d√©p√¥t: https://github.com/BF1337/basednode ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  3. Pour recompiler le n≈ìud:                                  ‚ïë"
echo "‚ïë     cd /tmp && git clone https://github.com/BF1337/basednode ‚ïë"
echo "‚ïë     cd basednode && cargo +nightly-2025-01-07 build --release ‚ïë"
echo "‚ïë     sudo cp target/release/basednode /opt/basedai/based     ‚ïë"
echo "‚ïë     sudo systemctl restart basedai                            ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "\e[0m"