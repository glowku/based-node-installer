#!/bin/bash
# Script de test complet pour BasedAI Node Installer avec BF1337/basednode

set -e

echo "=========================================="
echo "üß™ SCRIPT DE TEST COMPLET - BASEDAI NODE"
echo "=========================================="
echo ""

# Fonction pour afficher les r√©sultats de test
test_result() {
    if [ $1 -eq 0 ]; then
        echo "‚úÖ $2 - SUCC√àS"
    else
        echo "‚ùå $2 - √âCHEC"
        FAILED_TESTS+=("$2")
    fi
    echo ""
}

FAILED_TESTS=()

# 1. Tester la pr√©sence des fichiers essentiels
echo "1. Test des fichiers essentiels"
echo "--------------------------------"

files=("install.sh" "monitor.sh" "index.html" "monitor.html" "style.css" "script.js" "monitor.js")
for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        test_result 0 "Pr√©sence de $file"
    else
        test_result 1 "Pr√©sence de $file"
    fi
done

# 2. Tester les permissions
echo "2. Test des permissions des scripts"
echo "--------------------------------"

if [ -x "install.sh" ]; then
    test_result 0 "Permissions d'ex√©cution de install.sh"
else
    chmod +x install.sh
    test_result 0 "Permissions d'ex√©cution de install.sh (corrig√©)"
fi

if [ -x "monitor.sh" ]; then
    test_result 0 "Permissions d'ex√©cution de monitor.sh"
else
    chmod +x monitor.sh
    test_result 0 "Permissions d'ex√©cution de monitor.sh (corrig√©)"
fi

# 3. Tester la syntaxe des scripts
echo "3. Test de la syntaxe des scripts"
echo "--------------------------------"

if bash -n install.sh 2>/dev/null; then
    test_result 0 "Syntaxe de install.sh"
else
    test_result 1 "Syntaxe de install.sh"
fi

if bash -n monitor.sh 2>/dev/null; then
    test_result 0 "Syntaxe de monitor.sh"
else
    test_result 1 "Syntaxe de monitor.sh"
fi

# 4. Tester la structure HTML
echo "4. Test de la structure HTML"
echo "--------------------------------"

if grep -q "BasedAI Node Installer" index.html; then
    test_result 0 "Titre dans index.html"
else
    test_result 1 "Titre dans index.html"
fi

if grep -q "install-form" index.html; then
    test_result 0 "Formulaire d'installation dans index.html"
else
    test_result 1 "Formulaire d'installation dans index.html"
fi

if grep -q "BasedAI Node Monitor" monitor.html; then
    test_result 0 "Titre dans monitor.html"
else
    test_result 1 "Titre dans monitor.html"
fi

# 5. Tester la configuration CSS (CORRIG√â)
echo "5. Test de la configuration CSS"
echo "--------------------------------"

if grep -F "primary-color:" style.css; then
    test_result 0 "Variable primary-color dans CSS"
else
    test_result 1 "Variable primary-color dans CSS"
fi

if grep -F "bg-color:" style.css; then
    test_result 0 "Variable bg-color dans CSS"
else
    test_result 1 "Variable bg-color dans CSS"
fi

# 6. Tester les fonctions JavaScript
echo "6. Test des fonctions JavaScript"
echo "--------------------------------"

if grep -q "initThreeJSBackground" script.js; then
    test_result 0 "Fonction initThreeJSBackground dans script.js"
else
    test_result 1 "Fonction initThreeJSBackground dans script.js"
fi

if grep -q "showNotification" script.js; then
    test_result 0 "Fonction showNotification dans script.js"
else
    test_result 1 "Fonction showNotification dans script.js"
fi

if grep -q "initMonitor" monitor.js; then
    test_result 0 "Fonction initMonitor dans monitor.js"
else
    test_result 1 "Fonction initMonitor dans monitor.js"
fi

# 7. Tester la compatibilit√© BF1337
echo "7. Test de compatibilit√© avec BF1337/basednode"
echo "--------------------------------"

if grep -q "BF1337" install.sh; then
    test_result 0 "R√©f√©rence √† BF1337 dans install.sh"
else
    test_result 1 "R√©f√©rence √† BF1337 dans install.sh"
fi

if grep -q "github.com/BF1337/basednode" install.sh; then
    test_result 0 "URL du d√©p√¥t BF1337 dans install.sh"
else
    test_result 1 "URL du d√©p√¥t BF1337 dans install.sh"
fi

# 8. Tester la configuration r√©seau
echo "8. Test de la configuration r√©seau"
echo "--------------------------------"

if grep -q "30333" install.sh; then
    test_result 0 "Configuration du port P2P (30333)"
else
    test_result 1 "Configuration du port P2P (30333)"
fi

if grep -q "9933" install.sh; then
    test_result 0 "Configuration du port RPC (9933)"
else
    test_result 1 "Configuration du port RPC (9933)"
fi

if grep -q "8080" install.sh; then
    test_result 0 "Configuration du port monitoring (8080)"
else
    test_result 1 "Configuration du port monitoring (8080)"
fi

# R√©sum√©
echo "=========================================="
echo "üìä R√âSUM√â DES TESTS"
echo "=========================================="
echo ""

if [ ${#FAILED_TESTS[@]} -eq 0 ]; then
    echo "üéâ TOUS LES TESTS ONT R√âUSSI !"
    echo ""
    echo "‚úÖ Ton projet est pr√™t pour :"
    echo "   - L'installation de nodes BasedAI avec BF1337/basednode"
    echo "   - Le monitoring des nodes"
    echo "   - La gestion des services"
    echo "   - La configuration r√©seau"
    echo ""
    echo "üöÄ Tu peux maintenant d√©ployer ton projet !"
else
    echo "‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â :"
    echo ""
    for test in "${FAILED_TESTS[@]}"; do
        echo "‚ùå $test"
    done
    echo ""
    echo "üîß Corrige les probl√®mes ci-dessus avant de d√©ployer"
fi

echo "=========================================="
echo "üß™ FIN DES TESTS"
echo "=========================================="